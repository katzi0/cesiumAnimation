import { Highlight } from "../highlight";
import { Cesium } from "../../../index";

export class ChangeOpacity extends Highlight {

    super(pickedLabel, options) {
        this.pickedLabel = pickedLabel;
        this.options = options;
    }
    get options() {
        return this._options
    }

    set options(options) {
        this._options = options;
    }

    get color() {
        return this._color;
    }

    set color(color) {
        this._color = color;
    }


    get primitive() {
        return this.pickedLabel[this.options.primitiveType];
    }


    setPrimitiveProp(primtiveShapeKey) {
        this.setOpacity();
    }

    setOpacityVer1() {
        let scaleStep = this.calculateEnlargeStep();
        let currentOpacity = 1;
        const interval = window.setInterval(() => {
            currentOpacity -= scaleStep;
            this.primitive.color = new Cesium.Color.fromAlpha(Cesium.Color[this.primitiveConfig.color], currentOpacity);//new Cesium.Color.fromHsl(1,0.583, currentOpacity);
        }, this.primitiveConfig.timeoutInterval);
        window.setTimeout(() => {
            clearInterval(interval);
            this.primitive.color = Cesium.Color.Blue;
        }, this.primitiveConfig.duration);
    }

    setOpacity() {
        let scaleStep = this.calculateEnlargeStep();
        let currentOpacity = 1;
        let decrease = true;
        // const interval = window.setInterval(() => {
            if ((currentOpacity <= this.primitiveConfig.opacityEndResult && decrease) || (currentOpacity >= 1 && !decrease)) {
                decrease = !decrease;
            }
            currentOpacity -= decrease ? scaleStep : -scaleStep;
            this.primitive.color = new Cesium.Color.fromAlpha(Cesium.Color[this.primitiveConfig.color], currentOpacity);//new Cesium.Color.fromHsl(1,0.583, currentOpacity);
        // }, this.primitiveConfig.timeoutInterval);
        // window.setTimeout(() => {
        //     clearInterval(interval);
        //     this.primitive.color = Cesium.Color.Blue;
        // }, this.primitiveConfig.duration);
    }

    stopCallback() {
        this.primitive.color = Cesium.Color.Blue;
    }

    calculateEnlargeStep() {
        const durationInSeconds = this.options.duration;
        const numberOfSteps = (durationInSeconds / 2) / this.options.timeoutInterval;
        const currentColor = Cesium.Color[this.options.color];
        const scaleDelta = currentColor.alpha - this.options.opacityEndResult;
        const scalePerStep = scaleDelta / numberOfSteps;
        return scalePerStep;
    }

    calculateEnlargeStepVer1() {
        const durationInSeconds = this.options.duration;
        const numberOfSteps = (durationInSeconds) / this.options.timeoutInterval;
        const currentColor = Cesium.Color[this.options.color];
        const scaleDelta = currentColor.alpha - this.options.opacityEndResult;
        const scalePerStep = scaleDelta / numberOfSteps;
        return scalePerStep;
    }
}